    async def get_database_stats(self):
        """Get database statistics - FIXED without is_active column"""
        logger.info("get_database_stats called")
        
        try:
            # Create new connection for stats
            conn = pyodbc.connect(self.conn_str)
            cursor = conn.cursor()
            
            # Simple count query - NO is_active
            cursor.execute("SELECT COUNT(*) FROM documents")
            result = cursor.fetchone()
            total_count = result[0] if result else 0
            
            logger.info(f"Total documents: {total_count}")
            
            # All documents are considered active since no is_active column
            active_count = total_count
            
            # Get classification breakdown
            cursor.execute("""
                SELECT 
                    COALESCE(classification, 'unclassified') as class_name,
                    COUNT(*) as class_count
                FROM documents
                GROUP BY classification
                ORDER BY COUNT(*) DESC
            """)
            
            breakdown = []
            for row in cursor.fetchall():
                breakdown.append({
                    "classification": row[0],
                    "count": row[1]
                })
            
            cursor.close()
            conn.close()
            
            # Build response
            response = {
                "statistics": {
                    "total_documents": total_count,
                    "active_documents": active_count
                },
                "classification_breakdown": breakdown
            }
            
            logger.info(f"Returning stats: total={total_count}")
            return response
            
        except Exception as e:
            logger.error(f"Stats error: {str(e)}")
            return {
                "statistics": {
                    "total_documents": 0,
                    "active_documents": 0,
                    "error": str(e)
                },
                "classification_breakdown": []
            }
