---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Advanced Knowledge Management Orchestrator" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      }
      
      .loading-spinner {
        @apply animate-spin h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full;
      }
      
      .glass-effect {
        backdrop-filter: blur(10px);
        background: rgba(15, 23, 42, 0.8);
        border: 1px solid rgba(148, 163, 184, 0.1);
      }
      
      .service-pulse {
        animation: pulse-glow 2s infinite;
      }
      
      @keyframes pulse-glow {
        0%, 100% { opacity: 1; transform: scale(1); }
        50% { opacity: 0.8; transform: scale(1.05); }
      }
    </style>
  </head>
  
  <body class="bg-slate-900 text-slate-100 min-h-screen">
    <!-- Background gradient -->
    <div class="fixed inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 -z-10"></div>
    
    <!-- Animated background elements -->
    <div class="fixed inset-0 overflow-hidden -z-10">
      <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
    </div>
    
    <!-- Navigation -->
    <nav class="glass-effect border-b border-slate-800 sticky top-0 z-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <!-- Logo and title -->
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
              <span class="text-white font-bold text-sm">KM</span>
            </div>
            <h1 class="text-xl font-semibold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              Orchestrator
            </h1>
          </div>
          
          <!-- Status indicator -->
          <div class="flex items-center space-x-4">
            <div id="service-status" class="flex items-center space-x-2">
              <div class="w-2 h-2 bg-green-500 rounded-full service-pulse"></div>
              <span class="text-sm text-slate-400">All Systems Operational</span>
            </div>
            
            <!-- Settings button -->
            <button class="p-2 rounded-lg hover:bg-slate-800 transition-colors">
              <svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </nav>
    
    <!-- Main content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <slot />
    </main>
    
    <!-- Footer -->
    <footer class="border-t border-slate-800 mt-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="flex justify-between items-center">
          <div class="text-sm text-slate-400">
            Â© 2025 Sinclair AI. Powered by KM Orchestrator v2.0
          </div>
          <div class="flex space-x-4 text-sm text-slate-400">
            <a href="/docs" class="hover:text-slate-300 transition-colors">API Docs</a>
            <a href="/health" class="hover:text-slate-300 transition-colors">System Health</a>
            <a href="https://www.sinclair-ai.net" class="hover:text-slate-300 transition-colors">Sinclair AI</a>
          </div>
        </div>
      </div>
    </footer>
    
    <!-- Real-time status monitoring -->
    <script>
      // Monitor service health in real-time
      async function updateServiceStatus() {
        try {
          const response = await fetch('https://km-orchestrator.azurewebsites.net/api/simple-test');
          const data = await response.json();
          const statusEl = document.getElementById('service-status');
          
          if (data.summary.healthy === data.summary.total) {
            statusEl.innerHTML = `
              <div class="w-2 h-2 bg-green-500 rounded-full service-pulse"></div>
              <span class="text-sm text-slate-400">${data.summary.healthy}/${data.summary.total} Services Online</span>
            `;
          } else {
            statusEl.innerHTML = `
              <div class="w-2 h-2 bg-yellow-500 rounded-full service-pulse"></div>
              <span class="text-sm text-yellow-400">${data.summary.healthy}/${data.summary.total} Services Online</span>
            `;
          }
        } catch (error) {
          const statusEl = document.getElementById('service-status');
          statusEl.innerHTML = `
            <div class="w-2 h-2 bg-red-500 rounded-full service-pulse"></div>
            <span class="text-sm text-red-400">Service Check Failed</span>
          `;
        }
      }
      
      // Update every 30 seconds
      updateServiceStatus();
      setInterval(updateServiceStatus, 30000);
    </script>
  </body>
</html>