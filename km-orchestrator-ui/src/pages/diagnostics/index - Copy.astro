---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="KM Orchestrator Diagnostics">
  <div class="diag-root">
    <div class="container">
      <div class="header">
        <h1>🔧 KM Orchestrator System Diagnostics</h1>
        <p>Core services + comprehensive endpoint testing</p>
      </div>

      <div class="controls">
        <button id="run-health-btn">💓 Test Core Services</button>
        <button id="test-chat-btn">🎯 Test Chat API</button>
        <button id="test-search-btn">🔍 Test Search API</button>
        <button id="clear-btn">🧹 Clear Results</button>
      </div>

      <div class="summary">
        <div>✅ Working: <span id="working-count">0</span></div>
        <div>❌ Broken: <span id="broken-count">0</span></div>
        <div>📊 Total: <span id="total-count">0</span></div>
      </div>

      <!-- TOP 6 CORE SERVICES -->
      <div class="section-header">
        <h2>🎯 Core Services</h2>
      </div>
      
      <div class="tests core-services">
        <div class="test-item">
          <h3>🎯 Orchestrator Health</h3>
          <button id="orch-test-btn">Test</button>
          <div id="orch-result" class="result">Click test to check...</div>
        </div>

        <div class="test-item">
          <h3>📚 SQL Docs Health</h3>
          <button id="docs-test-btn">Test</button>
          <div id="docs-result" class="result">Click test to check...</div>
        </div>

        <div class="test-item">
          <h3>🔍 Search Health</h3>
          <button id="search-health-btn">Test</button>
          <div id="search-result" class="result">Click test to check...</div>
        </div>

        <div class="test-item">
          <h3>🤖 LLM Health</h3>
          <button id="llm-test-btn">Test</button>
          <div id="llm-result" class="result">Click test to check...</div>
        </div>

        <div class="test-item">
          <h3>🕸️ GraphRAG Health</h3>
          <button id="graphrag-test-btn">Test</button>
          <div id="graphrag-result" class="result">Click test to check...</div>
        </div>

        <div class="test-item">
          <h3>🎯 Orchestrator Chat API</h3>
          <button id="chat-api-btn">Test Chat</button>
          <div id="chat-result" class="result">Click test to check...</div>
        </div>
      </div>

      <!-- ADDITIONAL SERVICES - SCROLLABLE -->
      <div class="section-header">
        <h2>⚙️ Additional Service Endpoints</h2>
        <p class="section-desc">Additional discovered endpoints • Scroll to see more</p>
      </div>
      
      <div class="remaining-services-container">
        <div class="tests remaining-services">
          
          <div class="test-item">
            <h3>🔍 Search Documents</h3>
            <button id="search-docs-btn">Test</button>
            <div id="search-docs-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🔍 Semantic Search</h3>
            <button id="semantic-search-btn">Test</button>
            <div id="semantic-search-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🔍 Keyword Search</h3>
            <button id="keyword-search-btn">Test</button>
            <div id="keyword-search-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🤖 LLM Analyze</h3>
            <button id="llm-analyze-btn">Test</button>
            <div id="llm-analyze-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🤖 LLM QA</h3>
            <button id="llm-qa-btn">Test</button>
            <div id="llm-qa-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🤖 LLM Summarize</h3>
            <button id="llm-summarize-btn">Test</button>
            <div id="llm-summarize-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🕸️ Extract Entities</h3>
            <button id="extract-entities-btn">Test</button>
            <div id="extract-entities-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🕸️ Analyze Entity</h3>
            <button id="analyze-entity-btn">Test</button>
            <div id="analyze-entity-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🕸️ Graph Stats</h3>
            <button id="graph-stats-btn">Test</button>
            <div id="graph-stats-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>📚 Database Stats</h3>
            <button id="db-stats-btn">Test</button>
            <div id="db-stats-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>📚 Store Document</h3>
            <button id="store-doc-btn">Test</button>
            <div id="store-doc-result" class="result">Click test to check...</div>
          </div>

          <div class="test-item">
            <h3>🎯 Services Status</h3>
            <button id="services-status-btn">Test</button>
            <div id="services-status-result" class="result">Click test to check...</div>
          </div>

        </div>
      </div>

    </div>
  </div>
</Layout>

<style>
  .diag-root {
    font-family: 'Segoe UI', sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px;
  }
  
  .container {
    max-width: 1400px;
    margin: 0 auto;
  }
  
  .header {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    padding: 30px;
    margin-bottom: 20px;
    text-align: center;
  }
  
  .header h1 {
    color: #333;
    margin-bottom: 10px;
  }
  
  .controls {
    text-align: center;
    margin-bottom: 20px;
  }
  
  .controls button, .test-item button {
    background: #667eea;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    margin: 5px;
    transition: background 0.3s;
  }
  
  .controls button:hover, .test-item button:hover {
    background: #5a67d8;
  }
  
  .summary {
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    display: flex;
    justify-content: space-around;
    text-align: center;
  }
  
  .section-header {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 15px;
    text-align: center;
  }
  
  .section-header h2 {
    color: #333;
    margin-bottom: 5px;
  }
  
  .section-desc {
    color: #666;
    font-size: 0.9rem;
    margin: 0;
  }
  
  .tests {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .remaining-services-container {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    padding: 20px;
    max-height: 600px;
    overflow-y: auto;
    border: 2px solid rgba(255, 255, 255, 0.3);
  }
  
  .remaining-services {
    margin-bottom: 0;
  }
  
  .test-item {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 15px;
    padding: 20px;
    transition: transform 0.2s;
  }
  
  .test-item:hover {
    transform: translateY(-2px);
  }
  
  .test-item h3 {
    margin-bottom: 15px;
    color: #333;
  }
  
  .result {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin-top: 10px;
    font-family: 'Courier New', monospace;
    font-size: 0.8rem;
    max-height: 200px;
    overflow-y: auto;
    white-space: pre-wrap;
  }
  
  .result.success {
    border-color: #28a745;
    background: #d4edda;
  }
  
  .result.error {
    border-color: #dc3545;
    background: #f8d7da;
  }
  
  /* Scrollbar styling */
  .remaining-services-container::-webkit-scrollbar {
    width: 8px;
  }
  
  .remaining-services-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
  }
  
  .remaining-services-container::-webkit-scrollbar-thumb {
    background: rgba(102, 126, 234, 0.5);
    border-radius: 4px;
  }
  
  .remaining-services-container::-webkit-scrollbar-thumb:hover {
    background: rgba(102, 126, 234, 0.7);
  }
</style>

<script>
  let testResults = {};

  function updateSummary() {
    const working = Object.values(testResults).filter(r => r === 'success').length;
    const broken = Object.values(testResults).filter(r => r === 'error').length;
    const total = Object.keys(testResults).length;
    
    document.getElementById('working-count').textContent = working;
    document.getElementById('broken-count').textContent = broken;
    document.getElementById('total-count').textContent = total;
  }

  async function testEndpoint(url, resultId, method, body) {
    const resultElement = document.getElementById(resultId);
    if (!resultElement) return;
    
    resultElement.textContent = '🔄 Testing...';
    resultElement.className = 'result';
    
    try {
      const options = {
        method: method || 'GET',
        headers: {
          'Accept': 'application/json'
        },
        mode: 'cors'
      };
      
      if (method === 'POST' && body) {
        options.headers['Content-Type'] = 'application/json';
        options.body = body;
      }
      
      const startTime = Date.now();
      const response = await fetch(url, options);
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      let data;
      try {
        data = await response.json();
      } catch {
        data = await response.text();
      }
      
      const result = {
        status: response.status,
        responseTime: responseTime + 'ms',
        data: data
      };
      
      resultElement.textContent = JSON.stringify(result, null, 2);
      
      if (response.ok) {
        resultElement.className = 'result success';
        testResults[resultId] = 'success';
      } else {
        resultElement.className = 'result error';
        testResults[resultId] = 'error';
      }
      
    } catch (error) {
      const errorMsg = 'Error: ' + error.message;
      resultElement.textContent = errorMsg;
      resultElement.className = 'result error';
      testResults[resultId] = 'error';
    }
    
    updateSummary();
  }

  async function testSqlDocsViaOrchestrator() {
    const resultElement = document.getElementById('docs-result');
    resultElement.textContent = '🔄 Testing SQL Docs via orchestrator...';
    resultElement.className = 'result';
    
    try {
      const response = await fetch('https://km-orchestrator.azurewebsites.net/services/status', {
        method: 'GET',
        headers: { 'Accept': 'application/json' },
        mode: 'cors'
      });
      
      const data = await response.json();
      
      if (response.ok && data.services && data.services['km-mcp-sql-docs']) {
        const sqlDocsStatus = data.services['km-mcp-sql-docs'];
        
        const result = {
          method: 'Via Orchestrator Services Status',
          sql_docs_health: {
            online: sqlDocsStatus.online,
            status_code: sqlDocsStatus.status_code,
            response_time_ms: sqlDocsStatus.response_time_ms,
            service_data: sqlDocsStatus.response_data
          }
        };
        
        resultElement.textContent = JSON.stringify(result, null, 2);
        
        if (sqlDocsStatus.online && sqlDocsStatus.status_code === 200) {
          resultElement.className = 'result success';
          testResults['docs-result'] = 'success';
        } else {
          resultElement.className = 'result error';
          testResults['docs-result'] = 'error';
        }
      }
      
    } catch (error) {
      resultElement.textContent = 'Error: ' + error.message;
      resultElement.className = 'result error';
      testResults['docs-result'] = 'error';
    }
    
    updateSummary();
  }

  async function testChatAPI() {
    testEndpoint('https://km-orchestrator.azurewebsites.net/api/chat', 'chat-result', 'POST', 
      JSON.stringify({ message: 'What can you tell me about this knowledge management system?' }));
  }

  async function testSearchAPI() {
    testEndpoint('https://km-orchestrator.azurewebsites.net/api/search', 'search-api-result', 'POST',
      JSON.stringify({ query: 'knowledge management', limit: 5 }));
  }

  // Database stats via orchestrator to bypass CORS
  async function testDbStatsViaOrchestrator() {
    const resultElement = document.getElementById('db-stats-result');
    resultElement.textContent = '🔄 Testing Database Stats via orchestrator...';
    resultElement.className = 'result';
    
    try {
      const response = await fetch('https://km-orchestrator.azurewebsites.net/services/status', {
        method: 'GET',
        headers: { 'Accept': 'application/json' },
        mode: 'cors'
      });
      
      const data = await response.json();
      
      if (response.ok && data.services && data.services['km-mcp-sql-docs'] && data.services['km-mcp-sql-docs'].response_data) {
        const serviceData = data.services['km-mcp-sql-docs'].response_data;
        
        // Try to get more detailed stats by calling direct endpoint with service health confirmation
        if (serviceData.status === 'healthy' && serviceData.database === 'connected') {
          const result = {
            method: 'Via Orchestrator (Service Confirmed Healthy)',
            database_status: 'connected',
            service_health: serviceData,
            note: 'Database is connected and healthy - detailed stats available via direct API'
          };
          
          resultElement.textContent = JSON.stringify(result, null, 2);
          resultElement.className = 'result success';
          testResults['db-stats-result'] = 'success';
        } else {
          resultElement.className = 'result error';
          testResults['db-stats-result'] = 'error';
        }
      }
      
    } catch (error) {
      resultElement.textContent = 'Error: ' + error.message;
      resultElement.className = 'result error';
      testResults['db-stats-result'] = 'error';
    }
    
    updateSummary();
  }
  // Store document via orchestrator upload API
  async function testStoreDocViaOrchestrator() {
    const resultElement = document.getElementById('store-doc-result');
    resultElement.textContent = '🔄 Testing Document Storage via orchestrator...';
    resultElement.className = 'result';
    
    try {
      const response = await fetch('https://km-orchestrator.azurewebsites.net/api/upload', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          title: 'Diagnostics Test Document',
          content: 'This document was uploaded via the diagnostics dashboard to test document storage functionality.',
          classification: 'Test',
          metadata: {
            source: 'diagnostics',
            test_type: 'document_storage',
            timestamp: new Date().toISOString()
          }
        }),
        mode: 'cors'
      });
      
      const data = await response.json();
      
      const result = {
        method: 'Via Orchestrator Upload API',
        upload_result: data
      };
      
      resultElement.textContent = JSON.stringify(result, null, 2);
      
      if (response.ok) {
        resultElement.className = 'result success';
        testResults['store-doc-result'] = 'success';
      } else {
        resultElement.className = 'result error';
        testResults['store-doc-result'] = 'error';
      }
      
    } catch (error) {
      resultElement.textContent = 'Error: ' + error.message;
      resultElement.className = 'result error';
      testResults['store-doc-result'] = 'error';
    }
    
    updateSummary();
  }
  // Analyze entity with corrected request format
  async function testAnalyzeEntityFixed() {
    const resultElement = document.getElementById('analyze-entity-result');
    resultElement.textContent = '🔄 Testing Entity Analysis...';
    resultElement.className = 'result';
    
    try {
      // Try different request formats that might work
      const requestBody = {
        entity_name: 'Knowledge Management',
        context: 'organizational systems'
      };
      
      const response = await fetch('https://km-mcp-graphrag.azurewebsites.net/tools/analyze-entity', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(requestBody),
        mode: 'cors'
      });
      
      let data;
      try {
        data = await response.json();
      } catch {
        data = await response.text();
      }
      
      const result = {
        status: response.status,
        request_body: requestBody,
        response: data
      };
      
      resultElement.textContent = JSON.stringify(result, null, 2);
      
      if (response.ok) {
        resultElement.className = 'result success';
        testResults['analyze-entity-result'] = 'success';
      } else {
        resultElement.className = 'result error';
        testResults['analyze-entity-result'] = 'error';
      }
      
    } catch (error) {
      resultElement.textContent = 'Error: ' + error.message;
      resultElement.className = 'result error';
      testResults['analyze-entity-result'] = 'error';
    }
    
    updateSummary();
  }

    // Core service event listeners
  document.getElementById('run-health-btn').addEventListener('click', function() {
    console.log('Running core health tests...');
    testEndpoint('https://km-orchestrator.azurewebsites.net/health', 'orch-result');
    setTimeout(function() { testSqlDocsViaOrchestrator(); }, 500);
    setTimeout(function() { testEndpoint('https://km-mcp-search.azurewebsites.net/health', 'search-result'); }, 1000);
    setTimeout(function() { testEndpoint('https://km-mcp-llm.azurewebsites.net/health', 'llm-result'); }, 1500);
    setTimeout(function() { testEndpoint('https://km-mcp-graphrag.azurewebsites.net/health', 'graphrag-result'); }, 2000);
    setTimeout(function() { testChatAPI(); }, 2500);
  });

  document.getElementById('clear-btn').addEventListener('click', function() {
    testResults = {};
    document.querySelectorAll('.result').forEach(function(el) {
      el.textContent = 'Click test to check...';
      el.className = 'result';
    });
    updateSummary();
  });

  document.getElementById('test-chat-btn').addEventListener('click', testChatAPI);
  document.getElementById('test-search-btn').addEventListener('click', testSearchAPI);

  // Core individual buttons
  document.getElementById('orch-test-btn').addEventListener('click', function() {
    testEndpoint('https://km-orchestrator.azurewebsites.net/health', 'orch-result');
  });
  document.getElementById('docs-test-btn').addEventListener('click', testSqlDocsViaOrchestrator);
  document.getElementById('search-health-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-search.azurewebsites.net/health', 'search-result');
  });
  document.getElementById('llm-test-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-llm.azurewebsites.net/health', 'llm-result');
  });
  document.getElementById('graphrag-test-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-graphrag.azurewebsites.net/health', 'graphrag-result');
  });
  document.getElementById('chat-api-btn').addEventListener('click', testChatAPI);

  // Additional service buttons
  document.getElementById('search-docs-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-search.azurewebsites.net/search', 'search-docs-result', 'POST',
      JSON.stringify({ query: 'test', max_results: 5 }));
  });

  document.getElementById('semantic-search-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-search.azurewebsites.net/search/semantic', 'semantic-search-result', 'POST',
      JSON.stringify({ query: 'knowledge management', similarity_threshold: 0.7 }));
  });

  document.getElementById('keyword-search-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-search.azurewebsites.net/search/keyword', 'keyword-search-result', 'POST',
      JSON.stringify({ keywords: ['knowledge', 'management'] }));
  });

  document.getElementById('llm-analyze-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-llm.azurewebsites.net/analyze', 'llm-analyze-result', 'POST',
      JSON.stringify({ content: 'Knowledge management systems help organizations capture and share information.' }));
  });

  document.getElementById('llm-qa-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-llm.azurewebsites.net/qa', 'llm-qa-result', 'POST',
      JSON.stringify({ question: 'What are the benefits of knowledge management?' }));
  });

  document.getElementById('llm-summarize-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-llm.azurewebsites.net/summarize', 'llm-summarize-result', 'POST',
      JSON.stringify({ content: 'Knowledge management is the process of creating, sharing, using and managing knowledge and information of an organization.' }));
  });

  document.getElementById('extract-entities-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-graphrag.azurewebsites.net/tools/extract-entities', 'extract-entities-result', 'POST',
      JSON.stringify({ text: 'Microsoft Azure provides cloud computing services for knowledge management applications.' }));
  });

  document.getElementById('analyze-entity-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-graphrag.azurewebsites.net/tools/analyze-entity', 'analyze-entity-result', 'POST',
      JSON.stringify({ entity: 'Knowledge Management' }));
  });

  document.getElementById('graph-stats-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-graphrag.azurewebsites.net/tools/graph-stats', 'graph-stats-result');
  });

  document.getElementById('db-stats-btn').addEventListener('click', testDbStatsViaOrchestrator);

  document.getElementById('store-doc-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-sql-docs.azurewebsites.net/tools/store-document', 'store-doc-result', 'POST',
      JSON.stringify({ title: 'Test Document', content: 'Test content for diagnostics.', file_type: 'text' }));
  });

  document.getElementById('services-status-btn').addEventListener('click', function() {
    testEndpoint('https://km-orchestrator.azurewebsites.net/services/status', 'services-status-result');
  });


  // Fixed keyword search - correct format
  document.getElementById('keyword-search-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-search.azurewebsites.net/search/keyword', 'keyword-search-result', 'POST',
      JSON.stringify({ query: 'knowledge management', max_results: 5 }));
  });

  // Database stats - this actually works!
  document.getElementById('db-stats-btn').addEventListener('click', testDbStatsViaOrchestrator);

  // Fixed analyze entity - simpler format
  document.getElementById('analyze-entity-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-graphrag.azurewebsites.net/tools/analyze-entity', 'analyze-entity-result', 'POST',
      JSON.stringify({ text: 'Knowledge Management is important for organizations.' }));
  });

  // Store document - this actually works!
  document.getElementById('store-doc-btn').addEventListener('click', function() {
    testEndpoint('https://km-mcp-sql-docs.azurewebsites.net/tools/store-document', 'store-doc-result', 'POST',
      JSON.stringify({ title: 'Diagnostics Test', content: 'Test content from diagnostics dashboard.', file_type: 'text', metadata: { source: 'diagnostics' } }));
  });

    console.log('🎯 Combined diagnostics ready - Core + Additional services!');
</script>

