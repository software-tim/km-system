<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KM Orchestrator - Complete Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .header h1 {
            color: #333;
            font-size: 2.5rem;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-label {
            color: #888;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-value.green { color: #10b981; }
        .stat-value.blue { color: #3b82f6; }
        .stat-value.orange { color: #f59e0b; }
        .stat-value.purple { color: #8b5cf6; }

        .stat-desc {
            color: #666;
            font-size: 0.9rem;
        }

        .section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .section h2 {
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.5rem;
        }

        .capabilities-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .capability-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px;
            padding: 25px;
            position: relative;
            overflow: hidden;
        }

        .capability-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .capability-card:hover::before {
            transform: translateX(0);
        }

        .capability-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
            display: block;
        }

        .capability-title {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .capability-desc {
            opacity: 0.9;
            line-height: 1.5;
            margin-bottom: 15px;
        }

        .capability-services {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .service-tag {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .endpoints-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 15px;
        }

        .endpoint-card {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .endpoint-card:hover {
            border-color: #667eea;
            background: #f1f5f9;
            transform: translateY(-2px);
        }

        .endpoint-method {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 0.8rem;
            font-weight: bold;
            margin-bottom: 12px;
            text-transform: uppercase;
        }

        .method-get { background: #10b981; color: white; }
        .method-post { background: #f59e0b; color: white; }

        .endpoint-path {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
            font-size: 1.1rem;
        }

        .endpoint-desc {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .endpoint-example {
            background: #f1f5f9;
            border-left: 4px solid #667eea;
            padding: 10px;
            font-family: 'Courier New', monospace;
            font-size: 0.8rem;
            border-radius: 4px;
        }

        .services-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px;
        }

        .service-card {
            background: #f0f9ff;
            border: 2px solid #10b981;
            border-radius: 10px;
            padding: 20px;
            position: relative;
        }

        .service-card::before {
            content: "●";
            color: #10b981;
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 1.2rem;
        }

        .service-name {
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
            font-size: 1.1rem;
        }

        .service-desc {
            color: #666;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .service-features {
            display: flex;
            flex-wrap: wrap;
            gap: 6px;
        }

        .feature-tag {
            background: #e0f2fe;
            color: #0369a1;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .workflow-diagram {
            background: #f8fafc;
            border-radius: 10px;
            padding: 30px;
            margin: 20px 0;
            text-align: center;
        }

        .workflow-step {
            display: inline-block;
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px 20px;
            margin: 0 10px 10px 0;
            vertical-align: top;
            position: relative;
        }

        .workflow-step.input { border-color: #10b981; background: #f0fdf4; }
        .workflow-step.process { border-color: #3b82f6; background: #eff6ff; }
        .workflow-step.output { border-color: #f59e0b; background: #fffbeb; }

        .workflow-arrow {
            display: inline-block;
            margin: 0 10px;
            font-size: 1.5rem;
            color: #667eea;
            vertical-align: middle;
        }

        .test-panel {
            background: #f8fafc;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
        }

        .test-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .test-button {
            background: #667eea;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: background 0.3s ease;
        }

        .test-button:hover {
            background: #5a67d8;
        }

        .test-response {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            margin-top: 10px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            min-height: 60px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>🎯 KM Orchestrator Dashboard</h1>
            <p>Intelligent request routing and workflow orchestration for Knowledge Management System</p>
        </div>

        <!-- Stats -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-label">SYSTEM STATUS</div>
                <div class="stat-value green" id="systemStatus">All OK</div>
                <div class="stat-desc">Overall Health</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">ACTIVE SERVICES</div>
                <div class="stat-value blue" id="activeServices">4/4</div>
                <div class="stat-desc">MCP Services Online</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">AVG RESPONSE</div>
                <div class="stat-value orange" id="avgResponse">105ms</div>
                <div class="stat-desc">Cross-Service</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">TOTAL REQUESTS</div>
                <div class="stat-value purple" id="totalRequests">1,247</div>
                <div class="stat-desc">Since Startup</div>
            </div>
        </div>

        <!-- Orchestrator Capabilities -->
        <div class="section">
            <h2>🚀 Orchestrator Capabilities</h2>
            <div class="capabilities-grid">
                <div class="capability-card">
                    <span class="capability-icon">📄</span>
                    <div class="capability-title">Document Management</div>
                    <div class="capability-desc">Upload, process, and store documents across multiple formats (PDF, DOCX, TXT)</div>
                    <div class="capability-services">
                        <span class="service-tag">km-mcp-sql-docs</span>
                        <span class="service-tag">km-mcp-graphrag</span>
                    </div>
                </div>
                
                <div class="capability-card">
                    <span class="capability-icon">🔍</span>
                    <div class="capability-title">Intelligent Search</div>
                    <div class="capability-desc">Semantic search across documents with relevance ranking and context extraction</div>
                    <div class="capability-services">
                        <span class="service-tag">km-mcp-search</span>
                        <span class="service-tag">km-mcp-sql-docs</span>
                    </div>
                </div>
                
                <div class="capability-card">
                    <span class="capability-icon">🤖</span>
                    <div class="capability-title">AI Chat & Q&A</div>
                    <div class="capability-desc">Natural language queries with context-aware responses using RAG</div>
                    <div class="capability-services">
                        <span class="service-tag">km-mcp-llm</span>
                        <span class="service-tag">km-orchestrator</span>
                    </div>
                </div>
                
                <div class="capability-card">
                    <span class="capability-icon">📊</span>
                    <div class="capability-title">Analytics & Insights</div>
                    <div class="capability-desc">Generate summaries, extract insights, and analyze document patterns</div>
                    <div class="capability-services">
                        <span class="service-tag">km-mcp-graphrag</span>
                        <span class="service-tag">km-mcp-llm</span>
                    </div>
                </div>
                
                <div class="capability-card">
                    <span class="capability-icon">🌐</span>
                    <div class="capability-title">Knowledge Graphs</div>
                    <div class="capability-desc">Build and query knowledge graphs for relationship discovery</div>
                    <div class="capability-services">
                        <span class="service-tag">km-mcp-graphrag</span>
                    </div>
                </div>
                
                <div class="capability-card">
                    <span class="capability-icon">⚡</span>
                    <div class="capability-title">Workflow Orchestration</div>
                    <div class="capability-desc">Coordinate multi-service workflows and data pipelines</div>
                    <div class="capability-services">
                        <span class="service-tag">km-orchestrator</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Data Flow Diagram -->
        <div class="section">
            <h2>🔄 Orchestrator Data Flow</h2>
            <div class="workflow-diagram">
                <div class="workflow-step input">
                    <strong>📥 Input</strong><br>
                    Documents, Queries, Commands
                </div>
                <span class="workflow-arrow">→</span>
                <div class="workflow-step process">
                    <strong>🎯 Orchestrator</strong><br>
                    Route, Process, Coordinate
                </div>
                <span class="workflow-arrow">→</span>
                <div class="workflow-step process">
                    <strong>🔧 MCP Services</strong><br>
                    SQL, Search, LLM, GraphRAG
                </div>
                <span class="workflow-arrow">→</span>
                <div class="workflow-step output">
                    <strong>📤 Output</strong><br>
                    Responses, Insights, Results
                </div>
            </div>
        </div>

        <!-- API Endpoints -->
        <div class="section">
            <h2>🔌 Orchestrator API Endpoints</h2>
            <div class="endpoints-grid">
                <div class="endpoint-card">
                    <span class="endpoint-method method-get">GET</span>
                    <div class="endpoint-path">/health</div>
                    <div class="endpoint-desc">Health check and service status</div>
                    <div class="endpoint-example">curl https://km-orchestrator.azurewebsites.net/health</div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-get">GET</span>
                    <div class="endpoint-path">/services/status</div>
                    <div class="endpoint-desc">Check status of all MCP services</div>
                    <div class="endpoint-example">Returns: {service: status, response_time: ms}</div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-post">POST</span>
                    <div class="endpoint-path">/api/chat</div>
                    <div class="endpoint-desc">AI-powered chat with document search integration</div>
                    <div class="endpoint-example">POST: {"message": "What documents do you have about AI?"}</div>
                    <div class="test-panel">
                        <input type="text" class="test-input" id="chatInput" placeholder="Enter your question...">
                        <button class="test-button" onclick="testChat()">Test Chat</button>
                        <div class="test-response" id="chatResponse">Response will appear here...</div>
                    </div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-post">POST</span>
                    <div class="endpoint-path">/api/documents/upload</div>
                    <div class="endpoint-desc">Upload and process documents</div>
                    <div class="endpoint-example">POST: FormData with file → Routes to km-mcp-sql-docs</div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-get">GET</span>
                    <div class="endpoint-path">/api/documents/search</div>
                    <div class="endpoint-desc">Search documents with semantic similarity</div>
                    <div class="endpoint-example">GET: ?query=artificial intelligence&limit=10</div>
                    <div class="test-panel">
                        <input type="text" class="test-input" id="searchInput" placeholder="Search query...">
                        <button class="test-button" onclick="testSearch()">Test Search</button>
                        <div class="test-response" id="searchResponse">Search results will appear here...</div>
                    </div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-post">POST</span>
                    <div class="endpoint-path">/api/insights/generate</div>
                    <div class="endpoint-desc">Generate insights from document collection</div>
                    <div class="endpoint-example">POST: {"type": "summary", "documents": [ids]} → Routes to GraphRAG</div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-get">GET</span>
                    <div class="endpoint-path">/api/analytics/stats</div>
                    <div class="endpoint-desc">Get analytics and usage statistics</div>
                    <div class="endpoint-example">Returns: document counts, search metrics, service usage</div>
                </div>

                <div class="endpoint-card">
                    <span class="endpoint-method method-get">GET</span>
                    <div class="endpoint-path">/docs</div>
                    <div class="endpoint-desc">Interactive API documentation</div>
                    <div class="endpoint-example">Swagger/OpenAPI documentation interface</div>
                </div>
            </div>
        </div>

        <!-- MCP Services -->
        <div class="section">
            <h2>🛠️ Connected MCP Services</h2>
            <div class="services-grid">
                <div class="service-card">
                    <div class="service-name">km-mcp-sql-docs</div>
                    <div class="service-desc">Document storage and management with PostgreSQL backend</div>
                    <div class="service-features">
                        <span class="feature-tag">Upload</span>
                        <span class="feature-tag">Storage</span>
                        <span class="feature-tag">Metadata</span>
                        <span class="feature-tag">Search</span>
                    </div>
                </div>

                <div class="service-card">
                    <div class="service-name">km-mcp-search</div>
                    <div class="service-desc">Advanced semantic search with embedding-based similarity</div>
                    <div class="service-features">
                        <span class="feature-tag">Semantic Search</span>
                        <span class="feature-tag">Embeddings</span>
                        <span class="feature-tag">Ranking</span>
                    </div>
                </div>

                <div class="service-card">
                    <div class="service-name">km-mcp-llm</div>
                    <div class="service-desc">Large Language Model integration for AI responses</div>
                    <div class="service-features">
                        <span class="feature-tag">RAG</span>
                        <span class="feature-tag">Q&A</span>
                        <span class="feature-tag">Summarization</span>
                        <span class="feature-tag">Analysis</span>
                    </div>
                </div>

                <div class="service-card">
                    <div class="service-name">km-mcp-graphrag</div>
                    <div class="service-desc">Knowledge graph construction and graph-based RAG</div>
                    <div class="service-features">
                        <span class="feature-tag">Knowledge Graphs</span>
                        <span class="feature-tag">Relationships</span>
                        <span class="feature-tag">Graph RAG</span>
                        <span class="feature-tag">Insights</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Test Chat Function
        async function testChat() {
            const input = document.getElementById('chatInput');
            const response = document.getElementById('chatResponse');
            const message = input.value.trim();
            
            if (!message) {
                response.textContent = 'Please enter a message to test.';
                return;
            }
            
            response.textContent = 'Testing chat endpoint...';
            
            try {
                const result = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await result.json();
                response.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                response.textContent = `Error: ${error.message}`;
            }
        }

        // Test Search Function
        async function testSearch() {
            const input = document.getElementById('searchInput');
            const response = document.getElementById('searchResponse');
            const query = input.value.trim();
            
            if (!query) {
                response.textContent = 'Please enter a search query.';
                return;
            }
            
            response.textContent = 'Searching documents...';
            
            try {
                const result = await fetch(`/api/documents/search?query=${encodeURIComponent(query)}&limit=5`);
                const data = await result.json();
                response.textContent = JSON.stringify(data, null, 2);
            } catch (error) {
                response.textContent = `Error: ${error.message}`;
            }
        }

        // Load stats on page load
        window.addEventListener('load', async function() {
            try {
                const healthResponse = await fetch('/health');
                const healthData = await healthResponse.json();
                
                if (healthData.status === 'healthy') {
                    document.getElementById('systemStatus').textContent = 'All OK';
                    document.getElementById('systemStatus').className = 'stat-value green';
                }
            } catch (error) {
                document.getElementById('systemStatus').textContent = 'Error';
                document.getElementById('systemStatus').className = 'stat-value red';
            }
        });
    </script>
</body>
</html>
